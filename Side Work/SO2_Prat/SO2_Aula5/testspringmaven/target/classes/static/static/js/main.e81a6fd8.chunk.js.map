{"version":3,"sources":["components/Input.component.jsx","components/Form.component.jsx","index.js"],"names":["Input","props","state","value","className","error","this","handleError","opts","onChange","inputChange","Component","Form","field","errmsg","setState","prevState","failure","errcount","errmsgs","renderError","Object","values","find","v","handleSubmit","event","preventDefault","data","FormData","form","fetch","action","method","body","URLSearchParams","then","redirected","window","location","url","catch","e","console","warn","inputs","map","index","name","placeholder","type","key","errors","onSubmit","ref","fm","params","search","ReactDOM","render","get","document","getElementById"],"mappings":"wQAsCeA,E,kDAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAOF,EAAME,MAAQF,EAAME,MAAQ,GACnCC,UAAWH,EAAMG,UAAYH,EAAMG,UAAY,GAC/CC,OAAO,GALI,E,qDAWT,IAAD,EAC4BC,KAAKL,MAA9BM,EADH,EACGA,YAAgBC,EADnB,+BAGL,OADAF,KAAKC,YAAcA,EAEf,2CACQC,EADR,CAEIL,MAAOG,KAAKJ,MAAMC,MAClBM,SAAUH,KAAKI,YACfN,UAAWE,KAAKJ,MAAME,iB,GApBlBO,aC8FLC,E,kDA5FX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAWVM,YAAc,SAACM,EAAOC,GACbD,IAEDC,EACA,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC1BC,QAAS,GACTC,SAAUF,EAAUE,SAAW,EAC/BC,QAAQ,eAAMH,EAAUG,QAAjB,eAA2BN,EAAQC,QAG9C,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC1BC,QAAS,GACTC,SAAiC,IAAvBF,EAAUE,SAAiB,EAAIF,EAAUE,SAAW,EAC9DC,QAAQ,eAAMH,EAAUG,QAAjB,eAA2BN,EAAQ,WAzBnC,EA8BnBO,YAAc,WACV,GAAI,EAAKlB,MAAMgB,UAAY,EAAKhB,MAAMe,QAAS,CAC3C,IAAMH,EACF,EAAKZ,MAAMe,SACXI,OAAOC,OAAO,EAAKpB,MAAMiB,SAASI,MAAK,SAACC,GAAD,OAAOA,KAClD,OAAO,yBAAKpB,UAAU,SAASU,KAnCpB,EAuCnBW,aAAe,SAACC,GAEZ,GADAA,EAAMC,kBACD,EAAKzB,MAAMgB,SAAU,CACtB,IAAMU,EAAO,IAAIC,SAAS,EAAKC,MAC/BC,MAAM,EAAKD,KAAKE,OAAQ,CACpBC,OAAQ,EAAKH,KAAKG,OAClBC,KAAM,IAAIC,gBAAgBP,KAEzBQ,MAAK,SAACZ,GACCA,EAAEa,aAAYC,OAAOC,SAAWf,EAAEgB,QAEzCC,OAAM,SAACC,GAAD,OAAOC,QAAQC,KAAKF,QAhD/BzC,EAAMI,MACN,EAAKH,MAAQ,CACTe,QAAS,8BACTC,SAAU,GAGd,EAAKhB,MAAQ,CAAEgB,SAAU,GARd,E,qDAsDT,IAAD,OACC2B,EAASvC,KAAKL,MAAM4C,OAAOC,KAC7B,WAAgDC,GAAhD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,KAAM/C,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,UAAnC,OACI,kBAAC,EAAD,CACI+C,IAAKJ,EACLC,KAAMA,EACNC,YAAaA,EACbC,KAAMA,EACN/C,MAAOA,EACPC,UAAoB,WAAT8C,EAAoB9C,EAAY,GAC3CG,YAAa,EAAKA,iBAIxB6C,EAAS9C,KAAKc,cACpB,OACI,0CACQd,KAAKL,MADb,CAEIoD,SAAU/C,KAAKmB,aACf6B,IAAK,SAACC,GACF,EAAKzB,KAAOyB,KAGfV,EACAO,O,GA/EEzC,aCmBbV,EAAQ,CACV+C,KAAM,YACNf,OAAQ,OACRD,OAAQ,iBACRa,OAtBW,CACX,CACIG,KAAM,WACNC,YAAa,WACbC,KAAM,QAEV,CACIF,KAAM,WACNC,YAAa,WACbC,KAAM,YAEV,CACIA,KAAM,SACN/C,MAAO,SACPC,UAAW,SAWboD,EAAS,IAAIrB,gBAAgBG,OAAOC,SAASkB,QAEnDC,IAASC,OACL,kBAAC,EAAD,iBAAU1D,EAAV,CAAiBI,MAAOmD,EAAOI,IAAI,YACnCC,SAASC,eAAe,gB","file":"static/js/main.e81a6fd8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Input extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value ? props.value : \"\",\n            className: props.className ? props.className : \"\",\n            error: false,\n        };\n    }\n\n    //...\n\n    render() {\n        const { handleError, ...opts } = this.props;\n        this.handleError = handleError;\n        return (\n            <input\n                {...opts}\n                value={this.state.value}\n                onChange={this.inputChange}\n                className={this.state.className}\n            />\n        );\n    }\n}\n\nInput.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    value: PropTypes.string,\n    handleError: PropTypes.func,\n};\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Input from \"./Input.component\";\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        if (props.error) {\n            this.state = {\n                failure: \"wrong username or password!\",\n                errcount: 0,\n            };\n        } else {\n            this.state = { errcount: 0 };\n        }\n    }\n\n    handleError = (field, errmsg) => {\n        if (!field) return;\n\n        if (errmsg) {\n            this.setState((prevState) => ({\n                failure: \"\",\n                errcount: prevState.errcount + 1,\n                errmsgs: { ...prevState.errmsgs, [field]: errmsg },\n            }));\n        } else {\n            this.setState((prevState) => ({\n                failure: \"\",\n                errcount: prevState.errcount === 1 ? 0 : prevState.errcount - 1,\n                errmsgs: { ...prevState.errmsgs, [field]: \"\" },\n            }));\n        }\n    };\n\n    renderError = () => {\n        if (this.state.errcount || this.state.failure) {\n            const errmsg =\n                this.state.failure ||\n                Object.values(this.state.errmsgs).find((v) => v);\n            return <div className=\"error\">{errmsg}</div>;\n        }\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (!this.state.errcount) {\n            const data = new FormData(this.form);\n            fetch(this.form.action, {\n                method: this.form.method,\n                body: new URLSearchParams(data),\n            })\n                .then((v) => {\n                    if (v.redirected) window.location = v.url;\n                })\n                .catch((e) => console.warn(e));\n        }\n    };\n\n    render() {\n        const inputs = this.props.inputs.map(\n            ({ name, placeholder, type, value, className }, index) => (\n                <Input\n                    key={index}\n                    name={name}\n                    placeholder={placeholder}\n                    type={type}\n                    value={value}\n                    className={type === \"submit\" ? className : \"\"}\n                    handleError={this.handleError}\n                />\n            )\n        );\n        const errors = this.renderError();\n        return (\n            <form\n                {...this.props}\n                onSubmit={this.handleSubmit}\n                ref={(fm) => {\n                    this.form = fm;\n                }}\n            >\n                {inputs}\n                {errors}\n            </form>\n        );\n    }\n}\n\nForm.propTypes = {\n    name: PropTypes.string,\n    action: PropTypes.string,\n    method: PropTypes.string,\n    inputs: PropTypes.array,\n    error: PropTypes.string,\n};\n\nexport default Form;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Form from \"./components/Form.component\";\n\nconst inputs = [\n    {\n        name: \"username\",\n        placeholder: \"username\",\n        type: \"text\",\n    },\n    {\n        name: \"password\",\n        placeholder: \"password\",\n        type: \"password\",\n    },\n    {\n        type: \"submit\",\n        value: \"Submit\",\n        className: \"btn\",\n    },\n];\n\nconst props = {\n    name: \"loginForm\",\n    method: \"POST\",\n    action: \"/perform_login\",\n    inputs: inputs,\n};\n\nconst params = new URLSearchParams(window.location.search);\n\nReactDOM.render(\n    <Form {...props} error={params.get(\"error\")} />,\n    document.getElementById(\"container\")\n);\n"],"sourceRoot":""}